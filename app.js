// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'marionette', 'Models', 'Views', 'Controllers'], function($, _, Backbone, Marionette, Models, Views, Controllers) {
    var $document, $window, AppRouter, RouteController, app, hideObjectsOutOfViewport, redirectToHashUrl, setNightMode, settings, showSettings, showSubreddit, toggleMenu, updateMenu, updateTitle;
    $window = $(window);
    $document = $(document, $window);
    settings = Models.settings;
    app = new ((function(_super) {
      __extends(_Class, _super);

      function _Class() {
        return _Class.__super__.constructor.apply(this, arguments);
      }

      _Class.prototype.initialize = function(options) {};

      _Class.prototype.regions = {
        content: '.content',
        history: '.subreddit-history',
        menu: '.menu',
        related: '.related',
        sidebar: '#sidebar-wrapper'
      };

      return _Class;

    })(Marionette.Application));
    AppRouter = (function(_super) {
      __extends(AppRouter, _super);

      function AppRouter() {
        return AppRouter.__super__.constructor.apply(this, arguments);
      }

      AppRouter.prototype.appRoutes = {
        "": "home",
        "settings": "settings",
        ":sub": "sub",
        ":sub/comments/:id": "comments"
      };

      return AppRouter;

    })(Marionette.AppRouter);
    RouteController = (function(_super) {
      __extends(RouteController, _super);

      function RouteController() {
        return RouteController.__super__.constructor.apply(this, arguments);
      }

      RouteController.prototype.home = function() {
        return showSubreddit("all");
      };

      RouteController.prototype.sub = function(sub) {
        if (sub === 'settings') {
          return showSettings();
        } else {
          console.debug("selected sub: " + sub);
          return showSubreddit(sub);
        }
      };

      RouteController.prototype.comments = function() {
        return console.log("comments");
      };

      RouteController.prototype.settings = function() {
        return showSettings();
      };

      return RouteController;

    })(Marionette.Controller);
    setNightMode = function(bool) {
      var stylesheet, _i, _len, _ref, _results;
      if (bool === void 0) {
        bool = Boolean(settings.get('nightmode'));
      }
      _ref = document.styleSheets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stylesheet = _ref[_i];
        if (stylesheet.href && stylesheet.href.indexOf('-dark') > -1) {
          _results.push(stylesheet.disabled = !bool);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    updateTitle = function(title) {
      var model;
      if (title == null) {
        title = '';
      }
      document.title = title;
      model = new Backbone.Model({
        title: title.replace('/r/', '')
      });
      return app.menu.show(new Views.MenuView({
        model: model
      }));
    };
    app.commands.setHandler("updateTitle", updateTitle);
    updateMenu = function() {
      var pastSubs;
      pastSubs = Controllers.getHistory();
      return app.history.show(new Views.HistoryView({
        collection: new Backbone.Collection(pastSubs)
      }));
    };
    toggleMenu = function(bool) {
      var menu;
      menu = $("#wrapper", $document);
      if (bool === void 0) {
        return menu.toggleClass("toggled");
      } else {
        return menu.toggleClass("toggled", bool);
      }
    };
    app.commands.setHandler("toggleMenu", toggleMenu);
    hideObjectsOutOfViewport = function(selector) {
      var $posts, _ref;
      if (selector == null) {
        selector = '.post';
      }
      $posts = $(selector);
      $posts.css({
        visibility: 'hidden'
      });
      $("" + selector + ":in-viewport").removeStyle('visibility');
      return (_ref = $("" + selector + ":in-viewport:last").next()) != null ? _ref.removeStyle('visibility') : void 0;
    };
    showSubreddit = function(sub) {
      var collection, relatedSubs;
      if (sub == null) {
        sub = 'funny';
      }
      Controllers.addHistory(sub, sub);
      toggleMenu(false);
      updateTitle("/r/" + sub);
      updateMenu();
      relatedSubs = Controllers.getRelatedSubs(sub, 5);
      relatedSubs = _.sortBy(relatedSubs, 'sub');
      app.related.show(new Views.HistoryView({
        collection: new Backbone.Collection(relatedSubs)
      }));
      window.lastPostId = null;
      collection = new Models.Listing([], {
        subreddits: sub
      });
      app.content.show(new Views.ContentView({
        collection: collection
      }));
      return collection.fetch();
    };
    app.commands.setHandler("showSubreddit", showSubreddit);
    showSettings = function() {
      toggleMenu(false);
      document.title = 'Settings';
      return app.content.show(new Views.SettingsView);
    };
    redirectToHashUrl = function() {
      var e, exp, subs;
      exp = /\/r\/([a-z+_]+)/.exec(window.location.pathname);
      if (!exp) {
        return;
      }
      subs = exp[1];
      try {
        return window.history.replaceState({}, '', "/r/#/" + subs);
      } catch (_error) {
        e = _error;
        return window.location.assign(window.location.href.replace("/r/", "/r/#"));
      }
    };
    app.on('start', function() {
      redirectToHashUrl();
      setNightMode();
      updateTitle();
      return updateMenu();
    });
    app.on("start", function() {
      var router;
      router = new AppRouter({
        controller: new RouteController()
      });
      if (!Backbone.history) {
        console.error("Backbone.history not found!");
        return;
      }
      return Backbone.history.start();
    });
    app.on("start", function() {
      var preloadPages, requiredBTF;
      preloadPages = settings.get('preloadpages', 4);
      requiredBTF = window.innerHeight * preloadPages;
      return $window.scrollStopped(function() {
        var currentPost, currentY, model, _ref, _ref1, _ref2;
        if (settings.get('autoload')) {
          hideObjectsOutOfViewport('img');
        }
        currentY = window.innerHeight + window.scrollY;
        if ($document.height() - currentY < requiredBTF) {
          if ((_ref = app.content.currentView) != null) {
            if ((_ref1 = _ref.collection) != null) {
              _ref1.fetch();
            }
          }
        }
        currentPost = $('.post:in-viewport:first');
        model = currentPost != null ? (_ref2 = currentPost.data('view')) != null ? _ref2.model : void 0 : void 0;
        if (model && model.get('subreddit') && model.get('title')) {
          return updateTitle(model.get('subreddit') + ': ' + model.get('title'));
        }
      });
    });
    $('.clear', $document).on('click', function() {
      if (confirm('Clear the list of subreddits?')) {
        settings.remove('pastSubs');
        return window.location.reload();
      }
    });
    $('.prev-post', $document).on('click', function() {
      var post, scrollTop;
      post = $('.post:in-viewport');
      if (!post.length) {
        return;
      }
      if (post.length > 1) {
        post = post.first();
      } else {
        post = $('.post').first();
      }
      scrollTop = post.offset().top - 60;
      return ($window.wScrollTop || $window.scrollTop)(scrollTop);
    });
    $('.next-post', $document).on('click', function() {
      var scrollTop;
      scrollTop = $('.post:below-the-fold').first().offset().top - 60;
      return ($window.wScrollTop || $window.scrollTop)(scrollTop);
    });
    $('.read-post', $document).on('click', function() {
      var err, post, posts, scrollTop, _i, _len;
      scrollTop = $window.scrollTop();
      posts = [];
      $('.post').each(function(idx, post) {
        post = $(post);
        if (scrollTop >= post.offset().top) {
          return posts.push(post);
        }
      });
      for (_i = 0, _len = posts.length; _i < _len; _i++) {
        post = posts[_i];
        try {
          post.data('view').destroy();
        } catch (_error) {
          err = _error;
          console.debug("eck! " + err);
          post.remove();
        }
      }
      return $window.scrollTop(0);
    });
    return app;
  });

}).call(this);
