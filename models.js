// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(['jquery', 'underscore', 'backbone', 'marionette'], function($, _, Backbone, Marionette) {
    var Models, Settings, settings;
    Models = {};
    Settings = (function() {
      function Settings() {}

      Settings.prototype.get = function(key, defaultValue) {
        var e, thing;
        thing = localStorage.getItem(key);
        if ((!thing) && defaultValue !== void 0) {
          return defaultValue;
        }
        try {
          return JSON.parse(thing);
        } catch (_error) {
          e = _error;
          return thing;
        }
      };

      Settings.prototype.set = function(key, value) {
        return localStorage.setItem(key, JSON.stringify(value));
      };

      Settings.prototype.remove = function(key) {
        return localStorage.removeItem(key);
      };

      return Settings;

    })();
    settings = Models.settings = new Settings();
    Models.filterScore = function(comments, min) {
      if (comments == null) {
        comments = [];
      }
      if (min === -1) {
        return comments;
      } else if (min === void 0) {
        min = settings.get('minscore', 20);
      }
      return _.compact(_.map(comments, function(item) {
        var _ref;
        if ((item != null ? (_ref = item.data) != null ? _ref.score : void 0 : void 0) >= min) {
          return item;
        }
        return void 0;
      }));
    };
    Models.ReadOnlyModel = (function(_super) {
      __extends(ReadOnlyModel, _super);

      function ReadOnlyModel() {
        return ReadOnlyModel.__super__.constructor.apply(this, arguments);
      }

      ReadOnlyModel.prototype.sync = function() {
        var method, rest;
        method = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return Backbone.sync.apply(Backbone, ['read'].concat(__slice.call(rest)));
      };

      return ReadOnlyModel;

    })(Backbone.Model);
    Models.Post = (function(_super) {
      __extends(Post, _super);

      function Post() {
        return Post.__super__.constructor.apply(this, arguments);
      }

      return Post;

    })(Models.ReadOnlyModel);
    Models.Comment = (function(_super) {
      __extends(Comment, _super);

      function Comment() {
        return Comment.__super__.constructor.apply(this, arguments);
      }

      Comment.prototype.replies = function() {
        var comments, _ref, _ref1;
        comments = (_ref = this.get('replies')) != null ? (_ref1 = _ref.data) != null ? _ref1.children : void 0 : void 0;
        return Models.Comments(Models.filterScore(comments));
      };

      return Comment;

    })(Models.ReadOnlyModel);
    Models.Comments = (function(_super) {
      __extends(Comments, _super);

      function Comments() {
        return Comments.__super__.constructor.apply(this, arguments);
      }

      Comments.prototype.permalink = null;

      Comments.prototype.initialize = function(models, options) {
        if (options == null) {
          options = {};
        }
        return this.permalink = options.permalink || '';
      };

      Comments.prototype.url = function() {
        var url;
        return url = "http://www.reddit.com" + this.permalink + ".json?jsonp=?";
      };

      Comments.prototype.model = function(attrs, options) {
        if (attrs.kind && attrs.data) {
          return new Models.Comment(attrs.data, options);
        }
        return new Models.Comment(attrs, options);
      };

      Comments.prototype.fetch = function(options) {
        var dfr;
        if (options == null) {
          options = {};
        }
        dfr = new $.Deferred();
        _.extend(options, {
          cache: true,
          timeout: 15000
        });
        if (!this.permalink) {
          _.defer(function() {
            return dfr.resolve([]);
          });
          return dfr.promise();
        }
        Backbone.Collection.prototype.fetch.call(this, options).done((function(_this) {
          return function(data) {
            return dfr.resolve(data);
          };
        })(this));
        return dfr.promise();
      };

      Comments.prototype.parse = function(resp) {
        var comments, root, _ref, _ref1;
        root = resp;
        if (resp.length) {
          root = resp[1];
        }
        comments = (root != null ? (_ref = root.data) != null ? _ref.children : void 0 : void 0) || (root != null ? (_ref1 = root.data) != null ? _ref1.replies : void 0 : void 0);
        comments = Models.filterScore(comments);
        return _.sortBy(comments, (function(c) {
          return 1e5 - c.data.score;
        }));
      };

      return Comments;

    })(Backbone.Collection);
    Models.Listing = (function(_super) {
      __extends(Listing, _super);

      function Listing() {
        return Listing.__super__.constructor.apply(this, arguments);
      }

      Listing.prototype.initialize = function(models, options) {
        if (options == null) {
          options = {};
        }
        console.debug("Listing initialized with " + options.subreddits);
        return this.subreddits = options.subreddits;
      };

      Listing.prototype.model = function(attrs, options) {
        return new Models.Post(attrs, options);
      };

      Listing.prototype.url = function() {
        var url;
        if (this.subreddits === 'mine') {
          url = "http://www.reddit.com/.json?jsonp=?";
        } else {
          url = "http://www.reddit.com/r/" + this.subreddits + "/.json?jsonp=?";
        }
        if (window.lastPostId) {
          url += '&after=' + window.lastPostId;
        }
        return url;
      };

      Listing.prototype.fetch = function(options) {
        var dfr;
        if (options == null) {
          options = {};
        }
        dfr = new $.Deferred();
        _.extend(options, {
          add: true,
          merge: true,
          remove: false,
          reset: false,
          cache: true,
          timeout: 30000
        });
        Backbone.Collection.prototype.fetch.call(this, options).done(dfr.resolve).fail(function(reason) {
          return dfr.resolve([]);
        });
        return dfr.promise();
      };

      Listing.prototype.parse = function(resp) {
        var posts, _ref, _ref1, _ref2;
        posts = _.pluck(Models.filterScore(resp != null ? (_ref = resp.data) != null ? _ref.children : void 0 : void 0), 'data');
        if (resp != null ? (_ref1 = resp.data) != null ? _ref1.after : void 0 : void 0) {
          window.lastPostId = resp != null ? (_ref2 = resp.data) != null ? _ref2.after : void 0 : void 0;
        } else {
          window.lastPostId = _.last(posts).id;
        }
        _.each(posts, function(post) {
          if (post.subreddit === 'unexpectedjihad') {
            return post.subreddit = 'videos';
          }
        });
        return posts;
      };

      return Listing;

    })(Backbone.Collection);
    return Models;
  });

}).call(this);
